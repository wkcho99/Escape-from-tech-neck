{"version":3,"sources":["classifier/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["Classifier","canvasRef","useRef","imageRef","videoRef","useState","result","setResult","useEffect","a","navigator","mediaDevices","getUserMedia","audio","video","stream","current","srcObject","getCameraStream","interval","setInterval","captureImageFromCamera","formData","FormData","append","fetch","method","body","response","status","clearInterval","context","getContext","videoWidth","videoHeight","width","height","drawImage","toBlob","blob","ref","onCanPlay","play","id","hidden","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAoFeA,EAlFI,WACjB,IAAMC,EAAYC,mBACZC,EAAWD,mBACXE,EAAWF,mBAEjB,EAA4BG,mBAAS,IAArC,mBAAOC,EAAP,KAAeC,EAAf,KAEAC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACuBC,UAAUC,aAAaC,aAAa,CACvDC,OAAO,EACPC,OAAO,IAHX,OACQC,EADR,OAMMX,EAASY,UACXZ,EAASY,QAAQC,UAAYF,GAPjC,4CADc,uBAAC,WAAD,wBAYdG,KACC,IAEHV,qBAAU,WACR,IAAMW,EAAWC,YAAW,sBAAC,8BAAAX,EAAA,yDAC3BY,KAEIlB,EAASa,QAHc,uBAInBM,EAAW,IAAIC,UACZC,OAAO,QAASrB,EAASa,SALT,SAOFS,MAAM,YAAa,CACxCC,OAAQ,OACRC,KAAML,IATiB,OAOnBM,EAPmB,OAYzBrB,EAAUqB,EAASC,QAZM,2CAqB1B,KACH,OAAO,kBAAMC,cAAcX,MAC1B,IAEH,IAMME,EAAyB,WAC7B,IAAMU,EAAU9B,EAAUe,QAAQgB,WAAW,MAC7C,EAAoC5B,EAASY,QAArCiB,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,YAEpBjC,EAAUe,QAAQmB,MAAQF,EAC1BhC,EAAUe,QAAQoB,OAASF,EAE3BH,EAAQM,UAAUjC,EAASY,QAAS,EAAG,EAAGiB,EAAYC,GAEtDjC,EAAUe,QAAQsB,QAAO,SAACC,GACxBpC,EAASa,QAAUuB,MAIvB,OACE,qCACE,iCACE,oDAEF,iCACE,uBAAOC,IAAKpC,EAAUqC,UAAW,WAzBjCrC,EAASY,SACXZ,EAASY,QAAQ0B,QAwB4CC,GAAG,UAC9D,wBAAQH,IAAKvC,EAAW2C,QAAM,IAC9B,mDAAsBtC,YCzCfuC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCpBSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.a1214648.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nconst Classifier = () => {\n  const canvasRef = useRef();\n  const imageRef = useRef();\n  const videoRef = useRef();\n\n  const [result, setResult] = useState(\"\");\n\n  useEffect(() => {\n    async function getCameraStream() {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: false,\n        video: true,\n      });\n  \n      if (videoRef.current) {      \n        videoRef.current.srcObject = stream;\n      }\n    };\n  \n    getCameraStream();\n  }, []);\n  \n  useEffect(() => {\n    const interval = setInterval(async () => {\n      captureImageFromCamera();\n\n      if (imageRef.current) {\n        const formData = new FormData();\n        formData.append('image', imageRef.current);\n\n        const response = await fetch('/classify', {\n          method: \"POST\",\n          body: formData,\n        });\n\n        setResult(response.status)\n\n        // if (response.status === 200) {\n        //   const text = await response.text();\n        //   setResult(text);\n        // } else {\n        //   setResult(\"Error from API. \");\n        // }\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const playCameraStream = () => {\n    if (videoRef.current) {\n      videoRef.current.play();\n    }\n  };\n\n  const captureImageFromCamera = () => {\n    const context = canvasRef.current.getContext('2d');\n    const { videoWidth, videoHeight } = videoRef.current;\n\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n\n    context.drawImage(videoRef.current, 0, 0, videoWidth, videoHeight);\n\n    canvasRef.current.toBlob((blob) => {\n      imageRef.current = blob;\n    })\n  };\n\n  return (\n    <>\n      <header>\n        <h1>Image classifier</h1>\n      </header>\n      <main>\n        <video ref={videoRef} onCanPlay={() => playCameraStream()} id=\"video\" />\n        <canvas ref={canvasRef} hidden></canvas>\n        <p>Currently seeing: {result}</p>\n      </main>\n    </>\n  )\n};\n\nexport default Classifier;","// import logo from './logo.svg';\n// import './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default App;\n\nimport './App.css';\nimport Classifier from './classifier';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Classifier />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();"],"sourceRoot":""}