{"ast":null,"code":"var _jsxFileName = \"/home/bastian_preisel/gitProjects/Escape-from-tech-neck/frontend/src/components/camera/camera.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport Webcam from \"react-webcam\";\nimport \"./camera.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst WebcamComponent = () => /*#__PURE__*/_jsxDEV(Webcam, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 4,\n  columnNumber: 31\n}, this);\n\n_c = WebcamComponent;\nconst videoConstraints = {\n  width: 650,\n  height: 520,\n  facingMode: \"user\"\n};\nlet playAlert;\nlet toggle = \"stop\";\n\nconst TestOverlay = () => {\n  _s();\n\n  const [buttonName, setButtonName] = useState(\"start tracking\");\n  const webcamRef = React.useRef(null);\n  const [imgSrc, setImgSrc] = React.useState(null);\n  const [result, setResult] = useState(\"\");\n  const canvasRef = useRef();\n  const imageRef = useRef();\n  const videoRef = useRef(); // Get camera feed\n\n  useEffect(() => {\n    async function getCameraStream() {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: false,\n        video: true\n      });\n\n      if (videoRef.current) {\n        videoRef.current.srcObject = stream;\n      }\n    }\n\n    ;\n    getCameraStream();\n  }, []); // Send iage to API\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      captureImageFromCamera();\n\n      if (imageRef.current) {\n        const formData = new FormData();\n        formData.append('image', imageRef.current);\n        const response = await fetch('/classify', {\n          method: \"POST\",\n          body: formData\n        }); // setResult(response.status)\n\n        if (response.status === 200) {\n          const text = await response.text();\n          setResult(text);\n        } else {\n          setResult(\"Error from API. \");\n        }\n      }\n    }, 1000);\n    return () => clearInterval(interval);\n  }, []);\n\n  const playCameraStream = () => {\n    if (videoRef.current) {\n      videoRef.current.play();\n    }\n  };\n\n  const captureImageFromCamera = () => {\n    const context = canvasRef.current.getContext('2d');\n    const {\n      videoWidth,\n      videoHeight\n    } = videoRef.current;\n    canvasRef.current.width = videoWidth;\n    canvasRef.current.height = videoHeight;\n    context.drawImage(videoRef.current, 0, 0, videoWidth, videoHeight);\n    canvasRef.current.toBlob(blob => {\n      imageRef.current = blob;\n    });\n  };\n\n  const capture = React.useCallback(() => {\n    const imageSrc = webcamRef.current.getScreenshot();\n    setImgSrc(imageSrc);\n  }, [webcamRef, setImgSrc]);\n  console.log(\"play\", playAlert);\n\n  const func1 = () => {\n    capture();\n  };\n\n  const toggleAlert = function () {\n    if (toggle == \"stop\") {\n      startAlert();\n      toggle = \"start\";\n      setButtonName(\"stop tracking\");\n    } else if (toggle == \"start\") {\n      stopAlert();\n      toggle = \"stop\";\n      setButtonName(\"start tracking\");\n    }\n  };\n\n  const startAlert = function () {\n    playAlert = setInterval(func1, 10000);\n    console.log(\"start\", playAlert);\n  };\n\n  const stopAlert = function () {\n    console.log(\"stop\", playAlert);\n    clearInterval(playAlert);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      audio: false,\n      ref: webcamRef,\n      videoConstraints: videoConstraints,\n      screenshotFormat: \"image/jpeg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"startTrack\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"startBut\",\n        onClick: toggleAlert,\n        children: buttonName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          onCanPlay: () => playCameraStream(),\n          id: \"video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          hidden: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Currently seeing: \", result]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this), imgSrc && /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imgSrc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TestOverlay, \"m9dX14Cnf2m9JFDH5Qb7kKOPwBw=\");\n\n_c2 = TestOverlay;\nexport default TestOverlay;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"WebcamComponent\");\n$RefreshReg$(_c2, \"TestOverlay\");","map":{"version":3,"sources":["/home/bastian_preisel/gitProjects/Escape-from-tech-neck/frontend/src/components/camera/camera.js"],"names":["React","useState","useEffect","useRef","Webcam","WebcamComponent","videoConstraints","width","height","facingMode","playAlert","toggle","TestOverlay","buttonName","setButtonName","webcamRef","imgSrc","setImgSrc","result","setResult","canvasRef","imageRef","videoRef","getCameraStream","stream","navigator","mediaDevices","getUserMedia","audio","video","current","srcObject","interval","setInterval","captureImageFromCamera","formData","FormData","append","response","fetch","method","body","status","text","clearInterval","playCameraStream","play","context","getContext","videoWidth","videoHeight","drawImage","toBlob","blob","capture","useCallback","imageSrc","getScreenshot","console","log","func1","toggleAlert","startAlert","stopAlert"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport Webcam from \"react-webcam\";\r\nimport \"./camera.css\"\r\nconst WebcamComponent = () => <Webcam />;\r\nconst videoConstraints = {\r\n    width: 650,\r\n    height: 520,\r\n    facingMode: \"user\"\r\n  };\r\n  let playAlert;\r\n  let toggle = \"stop\";\r\n\r\n  const TestOverlay = () => {\r\n    const [buttonName,setButtonName] = useState(\"start tracking\");\r\n    const webcamRef = React.useRef(null);\r\n    const [imgSrc, setImgSrc] = React.useState(null);\r\n\r\n    const [result, setResult] = useState(\"\");\r\n    const canvasRef = useRef();\r\n    const imageRef = useRef();\r\n    const videoRef = useRef();\r\n    \r\n    // Get camera feed\r\n    useEffect(() => {\r\n      async function getCameraStream() {\r\n        const stream = await navigator.mediaDevices.getUserMedia({\r\n          audio: false,\r\n          video: true,\r\n        });\r\n    \r\n        if (videoRef.current) {      \r\n          videoRef.current.srcObject = stream;\r\n        }\r\n      };\r\n    \r\n      getCameraStream();\r\n    }, []);\r\n\r\n    // Send iage to API\r\n    useEffect(() => {\r\n      const interval = setInterval(async () => {\r\n        captureImageFromCamera();\r\n\r\n        if (imageRef.current) {\r\n          const formData = new FormData();\r\n          formData.append('image', imageRef.current);\r\n\r\n          const response = await fetch('/classify', {\r\n            method: \"POST\",\r\n            body: formData,\r\n          });\r\n\r\n          // setResult(response.status)\r\n\r\n          if (response.status === 200) {\r\n            const text = await response.text();\r\n            setResult(text);\r\n          } else {\r\n            setResult(\"Error from API. \");\r\n          }\r\n        }\r\n      }, 1000);\r\n      return () => clearInterval(interval);\r\n    }, []);\r\n\r\n    const playCameraStream = () => {\r\n      if (videoRef.current) {\r\n        videoRef.current.play();\r\n      }\r\n    };\r\n\r\n    const captureImageFromCamera = () => {\r\n      const context = canvasRef.current.getContext('2d');\r\n      const { videoWidth, videoHeight } = videoRef.current;\r\n  \r\n      canvasRef.current.width = videoWidth;\r\n      canvasRef.current.height = videoHeight;\r\n  \r\n      context.drawImage(videoRef.current, 0, 0, videoWidth, videoHeight);\r\n  \r\n      canvasRef.current.toBlob((blob) => {\r\n        imageRef.current = blob;\r\n      })\r\n    };\r\n\r\n    const capture = React.useCallback(() => {\r\n      const imageSrc = webcamRef.current.getScreenshot();\r\n      setImgSrc(imageSrc);\r\n    }, [webcamRef, setImgSrc]);\r\n    console.log(\"play\",playAlert);\r\n    const func1 = () =>{\r\n        capture();\r\n    }\r\n\r\n    const toggleAlert=function(){\r\n      if(toggle==\"stop\") {\r\n        startAlert();\r\n        toggle = \"start\";\r\n        setButtonName(\"stop tracking\");\r\n      }\r\n      else if(toggle==\"start\") {\r\n        stopAlert();\r\n        toggle = \"stop\";\r\n        setButtonName(\"start tracking\");\r\n      }\r\n    }\r\n\r\n    const startAlert = function() {\r\n        playAlert = setInterval(func1, 10000);\r\n        console.log(\"start\",playAlert);\r\n      };\r\n\r\n    const stopAlert = function() {\r\n        console.log(\"stop\",playAlert);\r\n        clearInterval(playAlert);\r\n      };\r\n  \r\n    return (\r\n      <>\r\n        <Webcam\r\n          audio={false}\r\n          ref={webcamRef}\r\n          videoConstraints = {videoConstraints}\r\n          screenshotFormat=\"image/jpeg\"\r\n        />\r\n        <div className =\"startTrack\">\r\n        <button className=\"startBut\" onClick={toggleAlert}>\r\n            {buttonName}\r\n        </button>\r\n        <main>\r\n        <video ref={videoRef} onCanPlay={() => playCameraStream()} id=\"video\" />\r\n        <canvas ref={canvasRef} hidden></canvas>\r\n        <p>Currently seeing: {result}</p>\r\n      </main>\r\n        </div>\r\n        {imgSrc && (\r\n          <img\r\n            src={imgSrc}\r\n          />\r\n        )}\r\n      </>\r\n    );\r\n  };\r\n\r\n  export default TestOverlay"]},"metadata":{},"sourceType":"module"}