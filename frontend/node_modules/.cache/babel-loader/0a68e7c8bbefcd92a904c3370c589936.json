{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\etn\\\\escape-from-tech-neck\\\\frontend\\\\src\\\\components\\\\record\\\\record.js\";\nimport React from 'react';\nimport { Line, Bar } from 'react-chartjs-2';\nimport { Chart, registerables } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChart.register(...registerables);\nconst options = {\n  spanGaps: true,\n  maxBarThickness: 30,\n  grouped: true,\n  interaction: {\n    mode: 'index'\n  },\n  scales: {\n    x: {\n      afterTickToLabelConversion: function (scaleInstance) {\n        const ticks = scaleInstance.ticks;\n        const newTicks = ticks.map(tick => {\n          return { ...tick,\n            label: tick.label + 'ðŸŽµ'\n          };\n        });\n        scaleInstance.ticks = newTicks;\n      },\n      grid: {\n        display: false,\n        drawTicks: true,\n        tickLength: 4,\n        color: '#E2E2E230'\n      },\n      axis: 'x',\n      position: 'bottom',\n      ticks: {\n        minRotation: 45,\n        padding: 5\n      }\n    },\n    y: {\n      type: 'linear',\n      grid: {\n        color: '#E2E2E230'\n      },\n      afterDataLimits: scale => {\n        scale.max = scale.max * 1.2;\n      },\n      axis: 'y',\n      display: true,\n      position: 'left',\n      title: {\n        display: true,\n        align: 'end',\n        color: '#808080',\n        font: {\n          size: 12,\n          family: \"'Noto Sans KR', sans-serif\",\n          weight: 300\n        },\n        text: 'ë‹¨ìœ„: ë°°'\n      }\n    },\n    y_sub: {\n      position: 'right',\n      title: {\n        display: true,\n        align: 'end',\n        color: '#808080',\n        font: {\n          size: 12,\n          family: \"'Noto Sans KR', sans-serif\",\n          weight: 300\n        },\n        text: 'ë‹¨ìœ„: ë°°'\n      },\n      afterDataLimits: scale => {\n        scale.max = scale.max * 1.2;\n      }\n    }\n  }\n};\nconst data = {\n  datasets: [{\n    type: 'line',\n    label: 'Dataset 1',\n    borderColor: 'rgb(54, 162, 235)',\n    borderWidth: 2,\n    data: [{\n      x: 'January',\n      y: 1\n    }, {\n      x: 'February',\n      y: 2\n    }, {\n      x: 'March',\n      y: 3\n    }, {\n      x: 'April',\n      y: null\n    }, {\n      x: 'May',\n      y: 5\n    }],\n    yAxisID: 'y_sub'\n  }, {\n    type: 'bar',\n    label: 'Dataset 2',\n    backgroundColor: 'rgb(255, 99, 132)',\n    data: [{\n      x: 'January',\n      y: 14\n    }, {\n      x: 'February',\n      y: 20\n    }, {\n      x: 'March',\n      y: 32\n    }, {\n      x: 'April',\n      y: 41\n    }, {\n      x: 'May',\n      y: 15\n    }, {\n      x: 'June',\n      y: 26\n    }],\n    borderColor: 'red',\n    borderWidth: 2\n  }, {\n    type: 'bar',\n    label: 'Dataset 3',\n    backgroundColor: 'rgb(75, 192, 192)',\n    data: [{\n      x: 'January',\n      y: 1\n    }, {\n      x: 'February',\n      y: 2\n    }, {\n      x: 'March',\n      y: 3\n    }, {\n      x: 'April',\n      y: 4\n    }, {\n      x: 'May',\n      y: 5\n    }, {\n      x: 'June',\n      y: 6\n    }],\n    yAxisID: 'y_sub'\n  }]\n};\n\nconst Record = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      type: \"line\",\n      data: data,\n      options: options\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Record;\nexport default Record;\n\nvar _c;\n\n$RefreshReg$(_c, \"Record\");","map":{"version":3,"sources":["C:/Users/user/etn/escape-from-tech-neck/frontend/src/components/record/record.js"],"names":["React","Line","Bar","Chart","registerables","register","options","spanGaps","maxBarThickness","grouped","interaction","mode","scales","x","afterTickToLabelConversion","scaleInstance","ticks","newTicks","map","tick","label","grid","display","drawTicks","tickLength","color","axis","position","minRotation","padding","y","type","afterDataLimits","scale","max","title","align","font","size","family","weight","text","y_sub","data","datasets","borderColor","borderWidth","yAxisID","backgroundColor","Record"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport { Line,Bar } from 'react-chartjs-2'\r\nimport { Chart, registerables } from 'chart.js';\r\nChart.register(...registerables);\r\n\r\nconst options = {\r\n    spanGaps: true,\r\n    maxBarThickness: 30,\r\n    grouped: true,\r\n    interaction: {\r\n      mode: 'index',\r\n    },\r\n    \r\n    scales: {\r\n      x: {\r\n        afterTickToLabelConversion: function (scaleInstance) {\r\n          const ticks = scaleInstance.ticks;\r\n  \r\n          const newTicks = ticks.map((tick) => {\r\n            return {\r\n              ...tick,\r\n              label: tick.label + 'ðŸŽµ'\r\n            };\r\n          });\r\n  \r\n          scaleInstance.ticks = newTicks;\r\n        },\r\n        grid: {\r\n          display: false,\r\n          drawTicks: true,\r\n          tickLength: 4,\r\n          color: '#E2E2E230'\r\n        },\r\n        axis: 'x',\r\n        position: 'bottom',\r\n        ticks: {\r\n          minRotation: 45,\r\n          padding: 5,\r\n        },\r\n      },\r\n      y: {\r\n        type: 'linear',\r\n        grid: {\r\n          color: '#E2E2E230',\r\n        },\r\n        afterDataLimits: (scale) => {\r\n          scale.max = scale.max * 1.2;\r\n        },\r\n        axis: 'y',\r\n        display: true,\r\n        position: 'left',\r\n        title: {\r\n          display: true,\r\n          align: 'end',\r\n          color: '#808080',\r\n          font: {\r\n            size: 12,\r\n            family: \"'Noto Sans KR', sans-serif\",\r\n            weight: 300,\r\n          },\r\n          text: 'ë‹¨ìœ„: ë°°'\r\n        }\r\n      },\r\n      y_sub: {\r\n        position: 'right',\r\n        title: {\r\n          display: true,\r\n          align: 'end',\r\n          color: '#808080',\r\n          font: {\r\n            size: 12,\r\n            family: \"'Noto Sans KR', sans-serif\",\r\n            weight: 300,\r\n          },\r\n          text: 'ë‹¨ìœ„: ë°°'\r\n        },\r\n        afterDataLimits: (scale) => {\r\n          scale.max = scale.max * 1.2;\r\n        },\r\n      },\r\n    }\r\n  };\r\n  const data = {\r\n    datasets: [\r\n        {\r\n          type: 'line',\r\n          label: 'Dataset 1',\r\n          borderColor: 'rgb(54, 162, 235)',\r\n          borderWidth: 2,\r\n          data: [\r\n            { x: 'January', y: 1 },\r\n            { x: 'February', y: 2 },\r\n            { x: 'March', y: 3 },\r\n            { x: 'April', y: null },\r\n            { x: 'May', y: 5 }\r\n          ],\r\n          yAxisID: 'y_sub',\r\n        },\r\n        {\r\n          type: 'bar',\r\n          label: 'Dataset 2',\r\n          backgroundColor: 'rgb(255, 99, 132)',\r\n          data: [\r\n            { x: 'January', y: 14 },\r\n            { x: 'February', y: 20 },\r\n            { x: 'March', y: 32 },\r\n            { x: 'April', y: 41 },\r\n            { x: 'May', y: 15 },\r\n            { x: 'June', y: 26 }\r\n          ],\r\n          borderColor: 'red',\r\n          borderWidth: 2,\r\n        },\r\n        {\r\n          type: 'bar',\r\n          label: 'Dataset 3',\r\n          backgroundColor: 'rgb(75, 192, 192)',\r\n          data: [\r\n            { x: 'January', y: 1 },\r\n            { x: 'February', y: 2 },\r\n            { x: 'March', y: 3 },\r\n            { x: 'April', y: 4 },\r\n            { x: 'May', y: 5 },\r\n            { x: 'June', y: 6 }\r\n          ],\r\n          yAxisID: 'y_sub',\r\n        },\r\n      ],\r\n  };\r\nconst Record = () => {\r\n  return (\r\n    <div>\r\n      <Line type=\"line\" data={data} options={options} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Record;\r\n"]},"metadata":{},"sourceType":"module"}